import json
import re
import tomllib
from pathlib import Path
from typing import TypedDict


def get_lerna_version():
    lerna = Path("lerna.json")
    if not lerna.exists():
        raise FileNotFoundError(f"Could not find {lerna}")
    return json.loads(lerna.read_bytes())["version"]


class Project(TypedDict):
    name: str
    version: str


def get_project(project: Path) -> Project:
    toml = project / "pyproject.toml"
    if not toml.exists():
        raise FileNotFoundError(f"Could not find {toml}")
    data = tomllib.loads(toml.read_text(encoding="utf-8"))
    return Project(data["project"])


def gen_version(path: Path):
    project = get_project(path)
    version_path = path / "src" / project["name"] / "version.py"
    version_path.write_bytes(
        f"""\
# Do not edit this file, it is automatically generated by scripts/py-generate_version.py
VERSION = "{project['version']}"
""".encode()
    )


def get_version(project: Path) -> str:
    toml = project / "pyproject.toml"
    version_match = re.search(
        r"version\s*=\s*\"([0-9.]*)\"", toml.read_text(encoding="utf-8")
    )
    if version_match is None:
        raise ValueError(f"Could not find version in {toml}")
    return version_match.group(1)


def set_version(project: Path, version: str):
    toml = project / "pyproject.toml"
    toml.write_bytes(
        re.sub(
            r"version\s*=\s*\"([0-9.]*)\"",
            f'version = "{version}"',
            toml.read_text(encoding="utf-8"),
        ).encode()
    )


def update_version(version: str | None = None):
    new_version = version or get_lerna_version()
    for pypackage in Path("packages-py").glob("*"):
        print(f"[{pypackage.name}] {get_version(pypackage)} -> {new_version}")
        set_version(pypackage, new_version)
        gen_version(pypackage)

    version_json_paths = {
        Path("packages-js/dash/src/lib/version.json"),
        Path("packages-js/site/src/lib/version.json"),
    }

    for version_path in version_json_paths:
        version_path.write_bytes((json.dumps({"version": new_version}) + "\n").encode())

    version_ts_paths = {
        Path("packages-js/plugin-obs/src/version.ts"),
    }

    for version_path in version_ts_paths:
        version_path.write_bytes(f"export const VERSION = '{new_version}';\n".encode())

    # pub static VERSION: &str = "0.1.0";
    version_path = Path("packages-js/dash/src-tauri/src/version.rs")
    version_path.write_bytes(f'pub static VERSION: &str = "{new_version}";\n'.encode())

    tauri_path = Path("packages-js/dash/src-tauri/tauri.conf.json")
    tauri = json.loads(tauri_path.read_bytes())
    tauri["package"]["version"] = new_version
    tauri_path.write_bytes((json.dumps(tauri, indent=4) + "\n").encode())
