name: Publish

on:
    workflow_dispatch:
        inputs:
            npm:
                description: 'Publish to NPM'
                required: true
                default: true
                type: boolean
            pypi:
                description: 'Publish to PyPI'
                required: true
                default: true
                type: boolean
            tauri:
                description: 'Publish to Tauri'
                required: true
                default: true
                type: boolean
            upload:
                description: 'Upload to Cloudflare R2'
                required: true
                default: true
                type: boolean

permissions:
    contents: write # for checkout and tag
    pull-requests: write # for comments
    packages: write # for publish

jobs:
    publish-npm:
        runs-on: ubuntu-latest
        env:
            NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
            NPM_TOKEN: ${{secrets.NPM_TOKEN}}
            GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        outputs:
            VERSION: ${{ steps.get_version.outputs.VERSION }}
        steps:
            - uses: actions/checkout@v4

            - name: Cache Bun dependencies
              uses: actions/cache@v4
              with:
                path: ~/.bun/install/cache
                key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lock') }}
                restore-keys: |
                  bun-${{ runner.os }}-

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2

            - name: Install Dependencies
              run: bun install --frozen-lockfile

            - name: Git Identity
              run: |
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'
                  git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Build
              if: ${{ github.event.inputs.npm == 'true' }}
              run: npx lerna run build

            - name: Version
              if: ${{ github.event.inputs.npm == 'true' }}
              run: npx lerna version --yes

            - name: Setup npmrc
              if: ${{ github.event.inputs.npm == 'true' }}
              run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

            - name: Get version
              id: get_version
              run: |
                  echo "VERSION=$(npx lerna ls --json | jq -r '.[0].version')" >> "$GITHUB_OUTPUT"

            - name: Push
              run: |
                  git push --follow-tags
                  echo "VERSION=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_ENV

            # - name: Publish
            #   if: ${{ github.event.inputs.npm == 'true' }}
            #   run: bun run publish
            #   env:
            #       NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

    publish-pypi:
        needs: publish-npm
        runs-on: ubuntu-latest
        outputs:
            VERSION: ${{ steps.git_commit.outputs.COMMIT }}
        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              if: ${{ github.event.inputs.pypi == 'true' }}
              uses: actions/setup-python@v5.1.0
              with:
                  python-version: '3.12'

            - name: Install rye
              if: ${{ github.event.inputs.pypi == 'true' }}
              uses: eifinger/setup-rye@v2.5.2
              with:
                  enable-cache: true
                  cache-prefix: 'rye'

            - name: Install dependencies
              if: ${{ github.event.inputs.pypi == 'true' }}
              run: |
                  rye config --set-bool behavior.use-uv=true
                  rye sync --no-lock

            - name: Git Identity
              if: ${{ github.event.inputs.pypi == 'true' }}
              run: |
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'
                  git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Pull
              if: ${{ github.event.inputs.pypi == 'true' }}
              run: |
                  git pull

            - name: Generate version file
              if: ${{ github.event.inputs.pypi == 'true' }}
              run: |
                  rye run gen_version

            - name: Push
              if: ${{ github.event.inputs.pypi == 'true' }}
              run: |
                  git add .
                  git commit -m "chore: bump version"
                  git push

            - name: Output git commit
              if: ${{ github.event.inputs.pypi == 'true' }}
              id: git_commit
              run: |
                  echo "COMMIT=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

            - name: Build
              if: ${{ github.event.inputs.pypi == 'true' }}
              run: |
                  rye build --all

            - name: Publish a Python distribution to PyPI
              if: ${{ github.event.inputs.pypi == 'true' }}
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install twine
                  python -m twine upload --repository pypi --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} dist/*

    publish-tauri:
        needs: [publish-npm, publish-pypi]
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: 'macos-latest' # for Arm based macs (M1 and above).
                      args: '--target aarch64-apple-darwin'
                    - platform: 'macos-latest' # for Intel based macs.
                      args: '--target x86_64-apple-darwin'
                    - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
                      args: ''
                    - platform: 'windows-latest'
                      args: ''

        runs-on: ${{ matrix.platform }}
        steps:
            - name: Checkout
              if: ${{ github.event.inputs.tauri == 'true' }}
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.publish-pypi.outputs.VERSION }}

            - name: Cache Bun dependencies
              if: ${{ github.event.inputs.tauri == 'true' }}
              uses: actions/cache@v4
              with:
                path: ~/.bun/install/cache
                key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lock') }}
                restore-keys: |
                  bun-${{ runner.os }}-

            - name: Setup Bun
              if: ${{ github.event.inputs.tauri == 'true' }}
              uses: oven-sh/setup-bun@v2

            - name: Install Dependencies
              if: ${{ github.event.inputs.tauri == 'true' }}
              run: bun install --frozen-lockfile

            - name: install dependencies (ubuntu only)
              if: ${{ matrix.platform == 'ubuntu-22.04' && github.event.inputs.tauri == 'true' }} # This must match the platform value defined above.
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
                  # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
                  # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

            - name: install Rust stable
              if: ${{ github.event.inputs.tauri == 'true' }}
              uses: dtolnay/rust-toolchain@stable
              with:
                  # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: build-pre
              if: ${{ github.event.inputs.tauri == 'true' }}
              run: |
                  bun run build
                  bun run --cwd packages-js/dash build-pre

            - name: Rust cache
              if: ${{ github.event.inputs.tauri == 'true' }}
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: './packages-js/dash/src-tauri -> target'

            - uses: tauri-apps/tauri-action@v0.5.19
              if: ${{ github.event.inputs.tauri == 'true' }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
              with:
                  tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
                  projectPath: ./packages-js/dash
                  releaseName: 'App v__VERSION__'
                  releaseBody: 'See the assets to download this version and install.'
                  releaseDraft: false
                  prerelease: true
                  updaterJsonPreferNsis: true
                  args: ${{ matrix.args }}
            
    upload-to-r2:
        if: ${{ github.event.inputs.upload == 'true' }}
        needs: [publish-npm, publish-pypi, publish-tauri]
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v4

        - name: Cache Bun dependencies
          uses: actions/cache@v4
          with:
            path: ~/.bun/install/cache
            key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lock') }}
            restore-keys: |
              bun-${{ runner.os }}-

        - name: Setup Bun
          uses: oven-sh/setup-bun@v2

        - name: Install Dependencies
          run: bun install --frozen-lockfile

        - name: Upload to Cloudflare R2
          env:
            CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            bun wrangler whoami
            bun ./scripts/js-upload-to-r2.ts --version ${{ needs.publish-npm.outputs.VERSION }} --beta true
