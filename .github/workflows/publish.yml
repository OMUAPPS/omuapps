name: Publish

on:
    workflow_dispatch:
        inputs:
            releaseType:
                type: choice
                description: Release type
                required: true
                options:
                    - release
                    - prerelease
                    - graduate

permissions:
    contents: write # for checkout and tag
    pull-requests: write # for comments
    packages: write # for publish

jobs:
    publish-npm:
        runs-on: ubuntu-latest
        env:
            NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
            NPM_TOKEN: ${{secrets.NPM_TOKEN}}
            GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        steps:
            - uses: actions/checkout@v4

            - name: Install pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 8
                  run_install: false

            - uses: actions/setup-node@v4.0.1
              with:
                  node-version: '20.x'
                  registry-url: 'https://registry.npmjs.org'
                  cache: 'pnpm'

            - name: Git Identity
              run: |
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'
                  git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Get pnpm store path
              id: pnpm-store-path
              run: echo "::set-output name=store_path::$(pnpm store path)"

            - name: Cache pnpm store
              uses: actions/cache@v4
              with:
                  path: ${{ steps.pnpm-store-path.outputs.store_path }}
                  key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      pnpm-${{ runner.os }}-

            - name: Install dependencies
              run: pnpm i --frozen-lockfile

            - name: Build
              run: npx lerna run build

            - if: ${{ inputs.releaseType == 'release' }}
              run: npx lerna publish --yes --no-private
            - if: ${{ inputs.releaseType == 'prerelease' }}
              run: npx lerna publish --yes --no-private --conventional-prerelease --dist-tag alpha
            - if: ${{ inputs.releaseType == 'graduate' }}
              run: npx lerna publish --yes --no-private --conventional-graduate

    publish-tauri:
        needs: publish-npm
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                platform: [macos-latest, ubuntu-latest, windows-latest]

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true

            - run: corepack enable

            - name: Setup Node.js 20.10.0
              uses: actions/setup-node@v4.0.2
              with:
                  node-version: 20.10.0
                  cache: 'pnpm'

            - name: Get pnpm store path
              id: pnpm-store-path
              run: echo "store_path=$(pnpm store path)" >> $GITHUB_ENV

            - name: Cache pnpm store
              uses: actions/cache@v4
              with:
                  path: ${{ steps.pnpm-store-path.outputs.store_path }}
                  key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      pnpm-${{ runner.os }}-

            - name: Install dependencies
              run: pnpm i --frozen-lockfile

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

            - uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
                  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
              with:
                  tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
                  projectPath: ./packages/dash
                  releaseName: 'App v__VERSION__'
                  releaseBody: 'See the assets to download this version and install.'
                  releaseDraft: true
                  prerelease: false

            - uses: actions/upload-artifact@v3
              if: matrix.platform == 'ubuntu-latest'
              with:
                  name: omuchat-appimage-linux
                  path: ./packages/dash/src-tauri/target/release/bundle/appimage/omuchat_**.AppImage.*

            - uses: actions/upload-artifact@v3
              if: matrix.platform == 'ubuntu-latest'
              with:
                  name: omuchat-deb-linux
                  path: ./packages/dash/src-tauri/target/release/bundle/deb/omuchat_**.deb

            - uses: actions/upload-artifact@v3
              if: matrix.platform == 'windows-latest'
              with:
                  name: omuchat-windows
                  path: ./packages/dash/src-tauri/target/release/bundle/msi/omuchat_**.msi.*

            - uses: actions/upload-artifact@v3
              if: matrix.platform == 'macos-latest'
              with:
                  name: omuchat-macos
                  path: ./packages/dash/src-tauri/target/release/bundle/macos/omuchat.app.tar.*
