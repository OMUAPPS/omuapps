name: Publish

on:
    workflow_dispatch:
        inputs:
            npm:
                description: 'Publish to NPM'
                required: true
                default: true
                type: boolean
            pypi:
                description: 'Publish to PyPI'
                required: true
                default: true
                type: boolean
            tauri:
                description: 'Publish to Tauri'
                required: true
                default: true
                type: boolean

permissions:
    contents: write # for checkout and tag
    pull-requests: write # for comments
    packages: write # for publish

jobs:
    publish-npm:
        runs-on: ubuntu-latest
        env:
            NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
            NPM_TOKEN: ${{secrets.NPM_TOKEN}}
            GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        steps:
            - uses: actions/checkout@v4

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - uses: pnpm/action-setup@v3
              name: Install pnpm
              with:
                  version: latest
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v4
              name: Setup pnpm cache
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm i --frozen-lockfile

            - name: Git Identity
              run: |
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'
                  git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Build
              run: npx lerna run build

            - name: Version
              run: npx lerna version --yes

            - name: Setup npmrc
              run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

            - name: Get version
              id: get_version
              run: echo ::set-output name=VERSION::$(npx lerna ls --json | jq -r '.[0].version')

            - name: Push
              run: |
                  git push --follow-tags
                  echo "VERSION=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_ENV

            - name: Publish
              if: ${{ github.event.inputs.npm == 'true' }}
              run: pnpm publish -r --access public --no-git-checks
              env:
                  NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

    publish-pypi:
        if: ${{ github.event.inputs.pypi == 'true' }}
        needs: publish-npm
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5.1.0
              with:
                  python-version: '3.12'

            - name: Install rye
              uses: eifinger/setup-rye@v2.5.2
              with:
                  enable-cache: true
                  cache-prefix: 'rye'

            - name: Generate version file
              run: |
                  python scripts/py-generate_version.py

            - name: Install dependencies
              run: |
                  rye config --set-bool behavior.use-uv=true
                  rye sync

            - name: Build
              run: |
                  rye build --all

            - name: Publish a Python distribution to PyPI
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install twine
                  python -m twine upload --repository pypi --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} dist/*

    publish-tauri:
        if: ${{ github.event.inputs.tauri == 'true' }}
        needs: publish-npm
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                platform: [macos-latest, ubuntu-latest, windows-latest]

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v4

            - run: corepack enable

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - uses: pnpm/action-setup@v3
              name: Install pnpm
              with:
                  version: 9
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v4
              name: Setup pnpm cache
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm i --frozen-lockfile

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

            - name: build-pre
              run: pnpm --filter dash run build-pre

            - uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
                  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
              with:
                  tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
                  projectPath: ./packages-js/dash
                  releaseName: 'App v__VERSION__'
                  releaseBody: 'See the assets to download this version and install.'
                  releaseDraft: true
                  prerelease: false

            - uses: actions/upload-artifact@v3
              if: matrix.platform == 'ubuntu-latest'
              with:
                  name: omuapps-appimage-linux
                  path: ./packages-js/dash/src-tauri/target/release/bundle/appimage/omuapps_**.AppImage.*

            - uses: actions/upload-artifact@v3
              if: matrix.platform == 'ubuntu-latest'
              with:
                  name: omuapps-deb-linux
                  path: ./packages-js/dash/src-tauri/target/release/bundle/deb/omuapps_**.deb

            - uses: actions/upload-artifact@v3
              if: matrix.platform == 'windows-latest'
              with:
                  name: omuapps-windows
                  path: ./packages-js/dash/src-tauri/target/release/bundle/msi/omuapps_**.msi.*

            - uses: actions/upload-artifact@v3
              if: matrix.platform == 'macos-latest'
              with:
                  name: omuapps-macos
                  path: ./packages-js/dash/src-tauri/target/release/bundle/macos/omuapps.app.tar.*
